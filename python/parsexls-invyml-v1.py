import openpyxl
import yaml
import ipaddress

def parse_excel_without_pandas(excel_file: str, output_file: str = 'inventory.yml') -> None:
    """
    –í–µ—Ä—Å–∏—è –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è pandas
    """
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞
        workbook = openpyxl.load_workbook(excel_file)
        sheet = workbook.active  # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç
        
        if sheet is None:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç –∏–∑ Excel —Ñ–∞–π–ª–∞")
        
        inventory = {'all': {'hosts': {}}}
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        headers = []
        for cell in sheet[1]:  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
            headers.append(cell.value)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        required_columns = ['Name', 'HostName', 'Ip-address']
        for col in required_columns:
            if col not in headers:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü: {col}")
        
        # –ò–Ω–¥–µ–∫—Å—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        name_idx = headers.index('Name')
        hostname_idx = headers.index('HostName')
        ip_idx = headers.index('Ip-address')
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏)
        row_count = 0
        for row_num in range(2, sheet.max_row + 1):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–µ–∫ —Å—Ç—Ä–æ–∫–∏
                name_cell = sheet.cell(row=row_num, column=name_idx + 1).value
                if not name_cell:  # –ü—É—Å—Ç–æ–µ –∏–º—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue
                
                host_name = str(name_cell).strip()
                hostname_cell = sheet.cell(row=row_num, column=hostname_idx + 1).value
                hostname = str(hostname_cell).strip() if hostname_cell else ""
                
                ip_cell = sheet.cell(row=row_num, column=ip_idx + 1).value
                ip_address = str(ip_cell).strip() if ip_cell else ""
                
                if not ip_address:
                    print(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {row_num}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç IP-–∞–¥—Ä–µ—Å")
                    continue
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ IP
                try:
                    if '/' in ip_address:
                        ip_without_mask = ip_address.split('/')[0]
                    else:
                        ip_without_mask = ip_address
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å IP
                    ipaddress.ip_address(ip_without_mask)
                    
                except ValueError:
                    print(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {row_num}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP-–∞–¥—Ä–µ—Å '{ip_address}'")
                    continue
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                host_vars = {
                    'ansible_host': ip_without_mask,
                    'ansible_user': 'admin'
                }
                
                if hostname:
                    host_vars['hostname'] = hostname
                
                inventory['all']['hosts'][host_name] = host_vars
                row_count += 1
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row_num}: {e}")
                continue
        
        # –ó–∞–ø–∏—Å—å –≤ YAML
        with open(output_file, 'w', encoding='utf-8') as f:
            yaml.dump(inventory, f, default_flow_style=False, allow_unicode=True, sort_keys=False)
        
        print(f"‚úÖ Inventory —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {output_file}")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ö–æ—Å—Ç–æ–≤: {row_count}")
        
    except FileNotFoundError:
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª '{excel_file}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –ª–∏—Å—Ç–∞
def parse_excel_explicit_sheet(excel_file: str, output_file: str = 'inventory.yml', sheet_name: str = None) -> None:
    """
    –í–µ—Ä—Å–∏—è —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –ª–∏—Å—Ç–∞
    """
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞
        workbook = openpyxl.load_workbook(excel_file)
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç
        if sheet_name:
            sheet = workbook[sheet_name]
        else:
            sheet = workbook.active
        
        if sheet is None:
            available_sheets = workbook.sheetnames
            raise ValueError(f"–ê–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã: {', '.join(available_sheets)}")
        
        print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç: {sheet.title}")
        
        inventory = {'all': {'hosts': {}}}
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = []
        for col in range(1, sheet.max_column + 1):
            cell_value = sheet.cell(row=1, column=col).value
            headers.append(str(cell_value) if cell_value else f"Column_{col}")
        
        print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        required_columns = ['Name', 'HostName', 'Ip-address']
        missing_columns = [col for col in required_columns if col not in headers]
        if missing_columns:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã: {', '.join(missing_columns)}")
        
        # –ò–Ω–¥–µ–∫—Å—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        name_idx = headers.index('Name')
        hostname_idx = headers.index('HostName')
        ip_idx = headers.index('Ip-address')
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫
        row_count = 0
        for row_num in range(2, sheet.max_row + 1):
            try:
                name_val = sheet.cell(row=row_num, column=name_idx + 1).value
                if not name_val:
                    continue
                
                host_name = str(name_val).strip()
                hostname_val = sheet.cell(row=row_num, column=hostname_idx + 1).value
                hostname = str(hostname_val).strip() if hostname_val else ""
                
                ip_val = sheet.cell(row=row_num, column=ip_idx + 1).value
                ip_address = str(ip_val).strip() if ip_val else ""
                
                if not ip_address:
                    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {row_num}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç IP-–∞–¥—Ä–µ—Å")
                    continue
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ IP
                try:
                    if '/' in ip_address:
                        ip_without_mask = ip_address.split('/')[0].strip()
                    else:
                        ip_without_mask = ip_address.strip()
                    
                    ipaddress.ip_address(ip_without_mask)
                    
                except ValueError as e:
                    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {row_num}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP-–∞–¥—Ä–µ—Å '{ip_address}'")
                    continue
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ö–æ—Å—Ç–∞
                host_vars = {
                    'ansible_host': ip_without_mask,
                    'ansible_user': 'admin'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                }
                
                if hostname:
                    host_vars['hostname'] = hostname
                
                inventory['all']['hosts'][host_name] = host_vars
                row_count += 1
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ö–æ—Å—Ç: {host_name} -> {ip_without_mask}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row_num}: {e}")
                continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Å—Ç—ã
        if not inventory['all']['hosts']:
            print("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞")
        
        # –ó–∞–ø–∏—Å—å –≤ YAML
        with open(output_file, 'w', encoding='utf-8') as f:
            yaml.dump(inventory, f, default_flow_style=False, allow_unicode=True, sort_keys=False)
        
        print(f"‚úÖ Inventory —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {output_file}")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ö–æ—Å—Ç–æ–≤: {row_count}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Excel —Ñ–∞–π–ª–∞
def create_sample_excel():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä Excel —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        workbook = openpyxl.Workbook()
        sheet = workbook.active
        sheet.title = "Hosts"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        sheet['A1'] = 'Name'
        sheet['B1'] = 'HostName'
        sheet['C1'] = 'Ip-address'
        
        # –î–∞–Ω–Ω—ã–µ
        data = [
            ['web-server-01', 'web01.local', '192.168.1.10/24'],
            ['web-server-02', 'web02.local', '192.168.1.11/24'],
            ['db-server-01', 'db01.local', '192.168.1.20/24'],
        ]
        
        for i, row_data in enumerate(data, start=2):
            sheet[f'A{i}'] = row_data[0]
            sheet[f'B{i}'] = row_data[1]
            sheet[f'C{i}'] = row_data[2]
        
        workbook.save('hosts.xlsx')
        print("‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞: hosts.xlsx")
        print("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞:")
        print("   - –õ–∏—Å—Ç: 'Hosts'")
        print("   - –°—Ç–æ–ª–±—Ü—ã: Name, HostName, Ip-address")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    create_sample_excel()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...")
    parse_excel_explicit_sheet('hosts.xlsx', 'inventory.yml')
    
    # –ò–ª–∏ –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é
    # parse_excel_without_pandas('hosts.xlsx', 'inventory.yml')